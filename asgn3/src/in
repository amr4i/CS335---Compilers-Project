{COMMENT} ;
{WHITESPACE}  ;
{DEFINE}  { return DEFINE; }
{UNDEF}  { return UNDEF; }
{BASE} { return BASE; }
{BOOL} { return BOOL; }
{BREAK} { return BREAK; }
{CASE} { return CASE; }
{CATCH} { return CATCH; }
{CHAR} { return CHAR; }
{CLASS} { return CLASS; }
{CONST} { return CONST; }
{CONTINUE}  { return CONTINUE; }
{DEFAULT} { return DEFAULT; }
{DO} { return DO; }
{ELSE} { return ELSE; }
{FALSE} { return FALSE; }
{FINALLY} { return FINALLY; }
{FOR} { return FOR; }
{FOREACH} { return FOREACH; }
{GOTO} { return GOTO; }
{IF} { return IF; }
{IN} { return IN; }
{INT} { return INT; }
{LONG} { return LONG; }
{NAMESPACE} { return NAMESPACE; }
{NEW} { return NEW; }
{NULL} { return NULL; }
{OBJECT} { return OBJECT; }
{PARAMS} { return PARAMS; }
{PRIVATE} { return PRIVATE; }
{PROTECTED} { return PROTECTED; }
{PUBLIC} { return PUBLIC; }
{REF} { return REF; }
{RETURN} { return RETURN; }
{STRING} { return STRING; }
{STRUCT} { return STRUCT; }
{SWITCH} { return SWITCH; }
{THIS} { return THIS; }
{THROW} { return THROW; }
{TRUE} { return TRUE; }
{TRY} { return TRY; }
{TYPEOF} { return TYPEOF; }
{UINT} { return UINT; }
{ULONG} { return ULONG; }
{USING} { return USING; }
{VOID} { return VOID; }
{WHILE} { return WHILE; }
{ID}  { yylval.sVal = yytext; return ID; }
{DINT_LITERAL}  { yylval.iVal = atoi(yytext); return DINT_LITERAL; }
{HDINT_LITERAL}  { yylval.iVal = atoi(yytext); return HDINT_LITERAL; }
{SIMPLE_ESC_SEQ}  { return SIMPLE_ESC_SEQ; }
{CHAR_LITERAL}  { yylval.cVal = *yytext; return CHAR_LITERAL; }
{REG_STR_LITERAL}  { yylval.sVal = yytext; return REG_STR_LITERAL; }
{VER_STR_LITERAL}  { yylval.sVal = yytext; return VER_STR_LITERAL; }
{NULL_LITERAL}  { return NULL_LITERAL; }
{LBRACE}  { return *yytext; }
{RBRACE}  { return *yytext; }
{LBRACKET}  { return *yytext; }
{RBRACKET}  { return *yytext; }
{LPARENTHESES}  { return *yytext; }
{RPARENTHESES}  { return *yytext; }
{DOT}  { return *yytext; }
{COMMA}  { return *yytext; }
{COLON}  { return *yytext; }
{SEMICOLON}  { return *yytext; }
{PLUS}  { return *yytext; }
{MINUS}  { return *yytext; }
{STAR}  { return *yytext; }
{DIVIDE}  { return *yytext; }
{MODULO}  { return *yytext; }
{AMPERSAND}  { return *yytext; }
{OR}  { return *yytext; }
{CARET}  { return *yytext; }
{EXCLAMATION}  { return *yytext; }
{TILDE}  { return *yytext; }
{EQUALS}  { return *yytext; }
{LESS_THAN}  { return *yytext; }
{GREATER_THAN}  { return *yytext; }
{QUESTION_MARK}  { return *yytext; }
{DOUBLE_QM}  { return DQM; }
{DOUBLE_COLON}  { return DCLN; }
{INCREMENT}  { return INCR; }
{DECREMENT}  { return DECR; }
{REL_AND} { return RAND; }
{REL_OR} { return ROR; }
{REL_EQUALS}  { return REQ; }
{REL_NOT_EQ}  { return RNE; }
{LESS_EQUALS}  { return LE; }
{GREATER_EQUALS}  { return GE; }
{ASSIGN_PLUS}  { return APLUS; }
{ASSIGN_MINUS}  { return AMINUS; }
{ASSIGN_STAR}  { return AMULT; }
{ASSIGN_DIV}  { return ADIV; }
{ASSIGN_MOD}  { return AMOD; }
{ASSIGN_AND}  { return AAND; }
{ASSIGN_OR}  { return AOR; }
{ASSIGN_CARET}  { return ACARET; }
{LEFT_SHIFT}  { return LSHIFT; }
{LEFT_SHIFT_EQ}  { return LSHIFTEQ; }
{RIGHT_SHIFT}  { return RSHIFT; }
{RIGHT_SHIFT_EQ}  { return RSHIFTEQ; }